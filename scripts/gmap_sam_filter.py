#!/usr/bin/env python

#################################################################################$$
# Copyright (c) 2011-2014, Pacific Biosciences of California, Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#  copyright notice, this list of conditions and the following
#  disclaimer in the documentation and/or other materials provided
#  with the distribution.
#
#  * Neither the name of Pacific Biosciences nor the names of its
#  contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
# BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#################################################################################$$


import os, re, sys
from Bio import SeqIO
from collections import namedtuple
import BioReaders

def sam_filter(sam_filename, output_filename, min_coverage, min_identity, query_fasta_filename, prog):
    if prog == 'gmap':
        reader_func = BioReaders.GMAPSAMReader
    elif prog == 'blasr':
        reader_func = BioReaders.BLASRSAMReader
    else:
        reader_func = BioReaders.SAMReader

    query_len_dict = dict((r.id,len(r.seq)) for r in SeqIO.parse(open(query_fasta_filename),'fasta'))
    reader = reader_func(sam_filename, has_header=True, query_len_dict=query_len_dict)
    f = open(output_filename, 'w')
    f.write(reader.header)
    for r in reader:
        if r.sID == '*': continue
        if r.qCoverage is None:
            print >> sys.stder, "qCoverage field is None! SAM file must not have been generated by BLASR or pblalign.py. Abort!"
            sys.exit(-1)
        if r.sID!='*' and r.qCoverage >= min_coverage and r.identity >= min_identity:
            f.write(r.record_line + '\n')
    f.close()
    

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser("Filtering SAM output")
    parser.add_argument("-i", "--input-sam", dest="input", required=True, help="Input SAM filename")
    parser.add_argument("-o", "--output-sam", dest="output", required=True, help="Output SAM filename")
    parser.add_argument("--query-fasta", dest="query_fasta_filename", required=True, help="Query fasta filename (used for getting query length accurately)")
    parser.add_argument("--min-coverage", dest="cov", default=.9, type=float, help="Minimum alignment coverage (def: 0.9)")
    parser.add_argument("--min-identity", dest="iden", default=.8, type=float, help="Minimum alignment identity (def: 0.8)")
    parser.add_argument("--prog", required=True, choices=['gmap', 'blasr', 'bowtie'], help="Program used to generate SAM")

    args = parser.parse_args()
    
    if args.cov < 0 or args.cov > 1:
        print >> sys.stderr, "min-coverage must be between 0-1."
        sys.exit(-1)
    if args.iden < 0 or args.iden > 1:
        print >> sys.stderr, "min-identity must be between 0-1."
        sys.exit(-1)   
             
    sam_filter(args.input, args.output, args.cov, args.iden, args.query_fasta_filename, args.prog)
